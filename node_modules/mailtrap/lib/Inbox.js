"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Inbox {
    constructor(client, name) {
        this.client = client;
        this.name = name;
    }
    get ID() {
        return this.id;
    }
    waitForMessages(condition, messageFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.init();
            yield this.client.waitForMessages(this.self.id, condition, messageFilter);
        });
    }
    getMessages(messageFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.init();
            const messages = yield this.client.getMessages(this.self.id, messageFilter);
            return messages;
        });
    }
    deleteMessages(messageFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.init();
            yield this.client.deleteMessages(this.self.id, messageFilter);
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.self) {
                const inboxes = yield this.client.getInboxes((inbox) => inbox.name === this.name);
                this.self = inboxes[0];
                this.id = inboxes[0].id;
            }
        });
    }
}
exports.Inbox = Inbox;
