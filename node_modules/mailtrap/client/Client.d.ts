import * as moment from "moment";
import { IInbox } from "./IInbox";
import { IMessage } from "./IMessage";
import { MessageBodyType } from "./MessageBodyType";
export interface IClientOptions {
    apiToken: string;
    pollingInterval?: number;
    waitTimeout?: number;
    endpoint?: string;
}
export declare class Client {
    private readonly apiToken;
    private readonly pollingInterval;
    private readonly waitTimeout;
    private readonly endpoint;
    constructor(options: IClientOptions);
    getInbox(inboxID: number): Promise<IInbox>;
    getInboxes(inboxFilter?: (inbox: IInbox) => boolean): Promise<IInbox[]>;
    getMessages(inboxID: number, messageFilter?: (message: IMessage) => boolean): Promise<IMessage[]>;
    deleteMessage(inboxID: number, messageID: number): Promise<string>;
    deleteMessages(inboxID: number, messageFilter?: (message: IMessage) => boolean): Promise<string[]>;
    getMessageBody(inboxID: number, messageID: number, bodyType: MessageBodyType): Promise<string>;
    waitForMessages(inboxID: number, condition: (messages: IMessage[]) => boolean, messageFilter?: (message: IMessage) => boolean, startTime?: moment.Moment): Promise<void>;
    private delete;
    private get;
    private getJSON;
    private getText;
    private isWaitTimeoutExceeded;
}
